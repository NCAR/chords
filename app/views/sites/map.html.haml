// configurations to set up leaflet
%link{rel: "stylesheet", href: "https://unpkg.com/leaflet@1.3.1/dist/leaflet.css", integrity: "sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==", crossorigin: ""}
%script{src: "https://unpkg.com/leaflet@1.3.1/dist/leaflet.js", integrity: "sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw==", crossorigin: ""}
//  configurations to load Esri Leaflet (for satellite layer)
%script{src: "https://unpkg.com/esri-leaflet@2.1.4/dist/esri-leaflet.js", integrity: "sha512-m+BZ3OSlzGdYLqUBZt3u6eA0sH+Txdmq7cqA1u8/B2aTXviGMMLOfrKyiIW7181jbzZAY0u+3jWoiL61iLcTKQ==",crossorigin:""}
%div#refreshinfo{style: "display: block"} Data source is refreshed every 5 minutes.
%div#geomap{style: "width: 800px; height: 600px; display: block"}
%button#street{style: "z-index: 1000; margin-top: 5px"} Street View
%button#satellite{style: "z-index: 1000; margin-top: 5px"} Satellite View
%div#sitename{style: "display: block; font-weight: bold; padding-top: 10px"} Site Name:
%div#site{style: "display: block; color: white"} site
:javascript

  /////////////////
  /// MAP SETUP ///
  /////////////////

  // Markers for Operational/Non-operational Sites
  var offMark = new L.Icon({
    iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
  });
  var onMark = new L.Icon({
    iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-green.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
  });

  // function to generate instrument popup content, add to popup, return contents
  function instPopupHTML(inst, imageTag, popup, contents) {
    contents += '<div style="display:inline-block;height:12px">' + imageTag + '</div>' +
                    '<div style="display:inline-block;height:12px;margin-left: 5px">' +
                    '<p style="margin:0;padding:0"><a href=' + inst.url + '>' + inst.name + '</a></p></div><br />';
    popup.setContent(contents);
    popup.update();
    return contents;
  }


  // function to populate marker's popup on map click
  function populateMarker(e, dataURL, siteName, siteURL) {
    var popup = e.target.getPopup();
    var popupContent = '<h4><a href=' + siteURL + '>' + siteName + '</a></h4><p style="margin:0;padding:0">Instruments:</p>';

    $.getJSON(dataURL, function (data) {
      data.forEach(function (inst) {
        if (inst.status) {
          popupContent = instPopupHTML(inst, '#{image_tag("button_green_50.png", size: "12")}', popup, popupContent);
        } else {
          popupContent = instPopupHTML(inst, '#{image_tag("button_red_50.png", size: "12")}', popup, popupContent);
        }
      })
    })
  }

  // function to plot markers and site marker status (given site data and the map),
  // returns the markers layer and plots markers on map
  function plotMarkers(data, map) {
    // create markers layer
    mLayer = L.geoJSON(data, {
      pointToLayer: function(feature, latlng) {
        var defaultPopup = L.popup();
        if (feature.properties.status) {
          return L.marker(latlng, {icon: onMark}).bindPopup(defaultPopup);
        } else {
          return L.marker(latlng, {icon: offMark}).bindPopup(defaultPopup);
        }
      },
      onEachFeature: function(feature, layer) {
        var siteName = feature.properties.name;
        var siteURL = feature.properties.url;
        var dataURL = feature.properties.url + '/map_balloon_json';
        // add click event listener
        layer.on('click', function(e) {
          map.setView(e.target.getLatLng(), 8);
          populateMarker(e, dataURL, siteName, siteURL);
        });


        // add mouseover event listener
        layer.on('mouseover', function(e) {
          document.getElementById('site').textContent = siteName;
          document.getElementById('site').style.color = 'black';
        });
        layer.on('mouseout', function(e) {
          document.getElementById('site').style.color = 'white';
        });
      }
    }).addTo(map);

    // checks to see if sites exists
    if (data.features.length == 0) {
      // if no sites, default to world view
      map.setView([20.0, 5.0], 2);
    } else {
      // otherwise, center map so that all markers displayed
      map.fitBounds(mLayer.getBounds().pad(0.5));
    }

    return(mLayer);
  }

  ///////////////////////////
  /// PLOTTING ACTUAL MAP ///
  ///////////////////////////

  // initialize json history variables
  var prevJSON = null;
  var recentJSON = null;

  // initialize markers layer
  var markersLayer = null;

  // initialize map
  var siteMap = L.map('geomap', { minZoom: 2 });

  // satellite layer
  var satelliteImg = L.esri.basemapLayer('Imagery');
  var satelliteLabels = L.esri.basemapLayer('ImageryLabels');
  var satelliteTile = L.layerGroup([satelliteImg, satelliteLabels]);

  // street layer
  var streetTile = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  });

  // initialize current tile layer
  streetTile.addTo(siteMap);
  var currTile = streetTile;

  document.getElementById("satellite").addEventListener("click", function() {
    siteMap.removeLayer(currTile);
    satelliteTile.addTo(siteMap);
    currTile = satelliteTile;
  });

  document.getElementById("street").addEventListener("click", function() {
    siteMap.removeLayer(currTile);
    streetTile.addTo(siteMap);
    currTile = streetTile;
  });


  // add initial markers
  $.getJSON("#{map_markers_geojson_sites_url}", function (data) {
    markersLayer = plotMarkers(data, siteMap);
    prevJSON = data;
  })

  // interval to refresh data source every 5 minutes
  setInterval(function() {
    $.getJSON("#{map_markers_geojson_sites_url}", function (data) {
      // store recently retrieved JSON
      recentJSON = data;
      // if the JSON has changed, remove current markers and replot
      if (JSON.stringify(recentJSON) != JSON.stringify(prevJSON)) {
        siteMap.removeLayer(markersLayer);
        markersLayer = plotMarkers(data, siteMap);
      }
      // save history
      prevJSON = recentJSON;
    })
  }, 300000)
