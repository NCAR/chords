AWSTemplateFormatVersion: '2010-09-09'

Description: AWS CloudFormation Template for a CHORDS Portal.

#####################################################################
Parameters:
  ChordsAdminPw:
    Default: chords_ec_demo
    Description: CHORDS database admin password (this is not the portal admin password). Choose carefully.
    Type: String

  ChordsGuestPw:
    Default: guest
    Description: CHORDS database guest password. Choose carefully.
    Type: String

  ChordsVersion:
    AllowedValues:
      - latest
      - development
    Default: latest
    Description: The version of CHORDS to deploy (E.g. the dockerhub tag)
    Type: String

  GitBranch:
    AllowedValues:
    - master
    - development
    - aws-chords-control-refactor
    Default: master
    Description: CHORDS git branch
    Type: String
    
  GrafanaAdminPw:
    Default: admin
    Description: The password for admin access to Grafana. Once Grafana is initialized with this password, it can only be changed from the Grafana admin web page. Replace this with a secure password.    
    Type: String
  
  ChordsEmailAddress:
    Default: unknown@gmail.com
    Description: An email account that will send CHORDS password reset instructions, Grafana alerts, etc. DO NOT use a personal or business account for this; instead set up an account specifically for CHORDS (e.g. at gmail).
    Type: String
  
  ChordsEmailPassword:
    Default: unknown
    Description: The password for the email account that will send CHORDS password reset instructions, Grafana alerts, etc. DO NOT use a personal or business account for this; instead set up an account specifically for CHORDS (e.g. at gmail).
    Type: String
  
  ChordsEmailServer:
    Default: smtp.gmail.com
    Description: The email server that can relay CHORDS password reset instructions, Grafana alerts, etc. You must have an account on this service.
    Type: String
  
  ChordsEmailPort:
    Default: 587
    Description: The SERVER PORT for the email server that can relay CHORDS password reset instructions, Grafana alerts, etc. You must have an account on this service.
    Type: String
                
  SecretKeyBase:
    Default: 9a9c4d7e7bed3d85a53bfaaee9cefd338c2ab5fda573cd933dfd3fea4178004425cb50a06df00a0c59a1d353defb9bd3e49fb5f47a791dec7daff95b2a6d080d
    Description: SECRET_KEY_BASE for Rails. This MUST be a randomly generated and 256 bits long.
    Type: String

  DbRetention:
    AllowedValues:
    - INF
    - 4w
    - 12w
    - 24w
    - 52w
    - 104w
    Default: 52w
    Description: Database retention duration (weeks, INF=forever)
    Type: String

  KapacitorEnabled:
    AllowedValues:
    - false
    - true
    Default: false
    Description: Enable kapacitor (WARNING, opens a security hole)
    Type: String
    
  InstanceType:
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
    Default: t2.small
    Description: CHORDS EC2 instance type
    Type: String

  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    MaxLength: '18'
    MinLength: '9'
    Type: String

  SecretKeyBase:
    Default: 9a9c4d7e7bed3d85a53bfaaee9cefd338c2ab5fda573cd933dfd3fea4178004425cb50a06df00a0c59a1d353defb9bd3e49fb5f47a791dec7daff95b2a6d080d
    Description: SECRET_KEY_BASE for Rails. This MUST be a randomly generated and 256 bits long.
    Type: String

#####################################################################
    
    
Mappings:
  AWSInstanceType2Arch:
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    t2.2xlarge:
      Arch: HVM64
    t2.xlarge:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64

  AWSRegionArch2AMI:
    ap-northeast-1:
      HVM64: ami-3bd3c45c
    ap-southeast-1:
      HVM64: ami-77af2014
    ap-southeast-2:
      HVM64: ami-10918173
    ca-north-1:
      HVM64: ami-a7aa15c3
    eu-central-1:
      HVM64: ami-82be18ed 
    eu-west-1:
      HVM64: ami-d7b9a2b1
    sa-east-1:
      HVM64: ami-87dab1eb
    us-east-1:
      HVM64: ami-a4c7edb2
    us-east-2:
      HVM64: ami-8a7859ef
    us-west-1:
      HVM64: ami-327f5352
    us-west-2:
      HVM64: ami-6df1e514

#####################################################################
Resources:

  ChordsEIP:
    Properties:
      InstanceId:
        Ref: ChordsServer
    Type: AWS::EC2::EIP

  ChordsServer:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - Ref: ChordsServerSecurityGroup
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
      - Key: ChordsType
        Value: Portal
      # ChordsServer::Properties::UserData instructs cfn to install and 
      # run CHORDS via full_install.
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - '#!/bin/bash -xe

              '
            - 'yum update -y aws-cfn-bootstrap

              '
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - Ref: AWS::StackId
            - '         --resource ChordsServer '
            - '         --configsets full_install '
            - '         --region '
            - Ref: AWS::Region
            - '

              '
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - Ref: AWS::StackId
            - '         --resource ChordsServer '
            - '         --region '
            - Ref: AWS::Region
            - '

              '
    Metadata:
      AWS::CloudFormation::Init:
        # configSets specifies the order that cfn_init runs 
        # the other AWS::CloudFormation::Init: types.
        configSets:
          full_install:
          - install_cfn
          - sys_update
          - yum_extras
          - install_docker
          - chords_extras
          - docker_compose
          - chords_config
          - docker_pull
          - chords_service

        # configure cfn.
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content:
                Fn::Join:
                - ''
                - - '[main]

                    '
                  - stack=
                  - Ref: AWS::StackId
                  - '

                    '
                  - region=
                  - Ref: AWS::Region
                  - '

                    '
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content:
                Fn::Join:
                - ''
                - - '[cfn-auto-reloader-hook]

                    '
                  - 'triggers=post.update

                    '
                  - 'path=Resources.ChordsServer.Metadata.AWS::CloudFormation::Init

                    '
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - Ref: AWS::StackName
                  - '         --resource ChordsServer '
                  - '         --configsets full_install '
                  - '         --region '
                  - Ref: AWS::Region
                  - '

                    '
                  - 'runas=root

                    '
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        
        # Perform a yum update for the system.
        sys_update:
          commands:
            01_update:
              command: yum update -y
        
        # Install some useful packages.
        yum_extras:
          packages:
            yum:
              emacs: []
              sysstat: []
        
        # Install docker as a service.
        install_docker:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'

        # Get some CHORDS extras.
        chords_extras:
          commands:
            # Fetch chords_control.
            01_docker_compose_yml:
              command: !Sub "curl -L https://raw.github.com/NCAR/chords_portal/${GitBranch}/chords_control > /var/lib/chords/chords_control"

        # Install docker-compose, docker-compose.yml, and get the CHORDS images.
        docker_compose:
          commands:
            # Install docker-compose.
            01_get_docker_compose:
              command: "curl -L https://github.com/docker/compose/releases/download/1.10.0/docker-compose-`uname -s`-`uname -m` > /bin/docker-compose && chmod +x /bin/docker-compose"

        # Create the CHORDS and docker-compose configuration files.
        chords_config:
          files:
            # Create the basic configuration in .env:
            /var/lib/chords/.env:
              content: !Sub |     
                CHORDS_ADMIN_PW=${ChordsAdminPw}
                CHORDS_GUEST_PW=${ChordsGuestPw}
                CHORDS_EMAIL_ADDRESS=${ChordsEmailAddress}
                CHORDS_EMAIL_PASSWORD=${ChordsEmailPassword}
                CHORDS_EMAIL_SERVER=${ChordsEmailServer}
                CHORDS_EMAIL_PORT=${ChordsEmailPort}
                GRAFANA_ADMIN_PW=${GrafanaAdminPw}
                GIT_BRANCH=${GitBranch}
                DOCKER_TAG=${ChordsVersion}
                RAILS_ENV=production
                DB_RETENTION=${DbRetention}
                SECRET_KEY_BASE=${SecretKeyBase}
                KAPACITOR_ENABLED=${KapacitorEnabled}
          commands:
            # Create chords.yml from .env. The .env file will also be updated.
            01_create_chords_yml:
              command: "cd /var/lib/chords && python chords_control -b"
 
        # Install docker-compose.yml and get the CHORDS images.
        docker_pull:
          commands:
            # Fetch the CHORDS docker-compose.yml.
            01_docker_compose_yml:
              command: !Sub "curl -L https://raw.github.com/NCAR/chords_portal/${GitBranch}/docker-compose.yml > /var/lib/chords/docker-compose.yml"
            # Pull the CHORDS images.
            02_docker_pull:
              command: "cd /var/lib/chords && /bin/docker-compose pull"

        # Install and enable the chords service
        chords_service:
          files:
            /etc/init.d/chords:
              content: |
                #!/bin/sh
                #
                # chkconfig:   2345 96 20
                # description: Daemon for chords
                #
                # based on https://gist.github.com/samalba/8bc1f848b4fa2db6f12e
                #
                ### BEGIN INIT INFO
                # Provides:   chords
                # Required-Start: docker
                # Required-Stop:  docker
                # Default-Start:  2 3 4 5
                # Default-Stop:   0 1 6
                # Short-Description: Docker Compose for CHORDS
                # Description: Docker Compose for CHORDS
                ### END INIT INFO
                #
                set -e
                #
                DOCKER_COMPOSE_PROJECT_NAME=chords
                DOCKER_COMPOSE_YAMLFILE=/var/lib/chords/docker-compose.yml
                #
                OPTS="-f $DOCKER_COMPOSE_YAMLFILE -p $DOCKER_COMPOSE_PROJECT_NAME"
                # UPOPTS="-d --no-recreate --no-build --no-deps"
                UPOPTS="-d"
                LABEL="docker-compose for CHORDS"
                DC=/bin/docker-compose
                #
                #. /etc/rc.d/init.d/functions
                #
                #
                cd /var/lib/chords
                #
                start () {
                  echo "Starting $LABEL"
                  $DC $OPTS up $UPOPTS
                }
                #
                stop () {
                  echo "Stopping $LABEL"
                  $DC $OPTS stop
                }
                #
                case "$1" in
                  up|start)
                    start
                    ;;
                #
                  stop)
                    stop
                    ;;
                #
                  status)
                    $DC $OPTS ps
                    ;;
                #
                  restart)
                    stop
                    start
                    ;;
                #
                  *)
                    echo "Usage: /etc/init.d/chords {up/start|stop|status|reload}" || true
                    exit 1
                    ;;
                esac
                #
                exit 0                                
              group: root
              mode: '000755'
              owner: root
            
          commands:
            # Enable the chords service
            01_chkconfig:
              command: "chkconfig chords --add && chkconfig chords on"  
            02_startchords:
              command: "service chords up"

  ChordsServerSecurityGroup:
    Properties:
      GroupDescription: Enable HTTP and SSH access
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      - CidrIp:
          Ref: SSHLocation
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        FromPort: '25'
        IpProtocol: tcp
        ToPort: '25'
      - CidrIp: 0.0.0.0/0
        FromPort: '3000'
        IpProtocol: tcp
        ToPort: '3000'
      - CidrIp: 0.0.0.0/0
        FromPort: '9092'
        IpProtocol: tcp
        ToPort: '9092'
    Type: AWS::EC2::SecurityGroup
    
#####################################################################
Outputs:
  WebsiteURL:
    Description: URL for newly created CHORDS Portal
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - ChordsServer
          - PublicDnsName
        - ''

