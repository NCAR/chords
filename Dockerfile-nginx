# Base image:
FROM nginx
 
# Install dependencies
RUN apt-get update -qq && apt-get -y \
  install \
  apache2-utils \
  curl\
  cron \
  logrotate \
  nano 

 
# establish where Nginx should look for files
ENV RAILS_ROOT /chords
 
# Set our working directory inside the image
WORKDIR $RAILS_ROOT
 
# create log directory
RUN mkdir log
 
# copy over static assets
COPY public public/
 
# Copy Nginx config template
COPY ./nginx_default.conf /tmp/default.nginx



# Customize the nginx configuration and log rotation
#COPY ./nginx_default.conf /etc/nginx/sites-available/default
#COPY ./logrotate_nginx /etc/logrotate.d/nginx
#COPY ./logrotate_nginx_cron /etc/cron.d/nginx




 
# substitute variable references in the Nginx config template for real values from the environment
# put the final config in its place
# where we store everything SSL-related


#ENV SSL_ROOT /var/www/ssl
ENV SSL_ROOT /etc/letsencrypt
 
# where Nginx looks for SSL files
#ENV SSL_CERT_HOME $SSL_ROOT/certs/live
 
ENV SSL_CERT_HOME $SSL_ROOT/live/chords

# copy over the script that is run by the container
#COPY web_cmd.sh /tmp/
#COPY letsencrypt.sh /var/www/ssh

#RUN envsubst '$RAILS_ROOT' < /tmp/docker_example.nginx > /etc/nginx/conf.d/default.conf
#RUN envsubst '$RAILS_ROOT:$SSL_ROOT:$SSL_CERT_HOME' < /tmp/doc
RUN envsubst '$RAILS_ROOT:$SSL_ROOT:$SSL_CERT_HOME'  < /tmp/default.nginx > /etc/nginx/conf.d/default.conf

#RUN rm -rf /etc/nginx/sites-available/default
#ADD config/nginx.conf /etc/nginx/sites-enabled/nginx.conf
 
# Create the log file to be able to run tail
RUN touch /var/log/cron.log

 
EXPOSE 80
EXPOSE 443
 
# Use the "exec" form of CMD so Nginx shuts down gracefully on SIGTERM (i.e. `docker stop`)
CMD [ "nginx", "-g", "daemon off;" ]
#CMD [ "/tmp/web_cmd.sh" ]
